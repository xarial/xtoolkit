parameters:
  projectName : ''
  
stages:

- stage: 'Build'
  variables:
    buildConfiguration: 'Release'
    buildPlatform: 'Any CPU'

  jobs:
  - job:
    pool:
      name: 'Azure Pipelines'
      vmImage: windows-latest
      demands:
        - msbuild
        - visualstudio

    steps:
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'

      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          restoreSolution: '**\*.sln'

      - task: DownloadSecureFile@1
        name: Certificate
        displayName: 'Download code signing certificate'
        inputs:
          secureFile: xarial.snk

      - task: VSBuild@1
        displayName: 'Build preview version (Runtime 4)'
        inputs:
          solution: 'src\${{ parameters.projectName }}\*.csproj'
          msbuildArgs: '/p:OutputPath=$(System.DefaultWorkingDirectory)\build\preview;SignAssembly=true;AssemblyOriginatorKeyFile=$(Certificate.secureFilePath);DelaySign=false;VersionSuffix=$(Build.BuildNumber);TargetRuntimeVersion=4'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: VSBuild@1
        displayName: 'Build preview version (Runtime 6)'
        inputs:
          solution: 'src\${{ parameters.projectName }}\*.csproj'
          msbuildArgs: '/p:OutputPath=$(System.DefaultWorkingDirectory)\build\preview;SignAssembly=true;AssemblyOriginatorKeyFile=$(Certificate.secureFilePath);DelaySign=false;VersionSuffix=$(Build.BuildNumber);TargetRuntimeVersion=6'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'

      - task: VSBuild@1
        displayName: 'Pack preview version'
        inputs:
          solution: 'src\${{ parameters.projectName }}\*.csproj'
          msbuildArgs: '/t:pack'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
      
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: VSBuild@1
          displayName: 'Build and pack release version'
          inputs:
            solution: 'src\${{ parameters.projectName }}\*.csproj'
            msbuildArgs: '/t:pack /p:OutputPath=$(System.DefaultWorkingDirectory)\build\release;SignAssembly=true;AssemblyOriginatorKeyFile=$(Certificate.secureFilePath);DelaySign=false'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'
            
      - task: VSBuild@1
        displayName: 'Build test projects'
        inputs:
            solution: 'tests\${{ parameters.projectName }}.Tests\*.csproj'
            platform: '$(BuildPlatform)'
            configuration: '$(BuildConfiguration)'
            
      - task: VSTest@2
        displayName: 'Unit test'
        inputs:
          testAssemblyVer2: |
            **\$(BuildConfiguration)\**\*tests*.dll
            !**\obj\**
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
      
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - task: CopyFiles@2
          displayName: 'Copy Nuget Package'
          inputs:
            SourceFolder: '$(system.defaultworkingdirectory)/build'
            Contents: |
              **\*.nupkg
              **\*.snupkg
            TargetFolder: '$(Build.ArtifactStagingDirectory)/packages'
      
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - publish: '$(Build.ArtifactStagingDirectory)/packages'
          artifact: 'packages'

- stage: 'PublishPreviewNuGetPackage'
  displayName: 'Publish Preview NuGet Package to xarial nuget feed'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/preview/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'xtoolkit/xtoolkit-preview'
        
- stage: 'PublishPreReleaseNuGetPackage'
  displayName: 'Publish Prerelease NuGet Package to xarial nuget feed'
  dependsOn: 'Build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/release/*.nupkg'
        allowPackageConflicts: true
        nuGetFeedType: 'internal'
        publishVstsFeed: 'xarial'

- stage: 'PublishProductionPackage'
  variables:
      - group: build-vars
      - name: packagePath
        value:
  displayName: 'Publish Release NuGet Package to Nuget.org production'
  dependsOn: 'PublishPreReleaseNuGetPackage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment:
    pool:
      vmImage: 'windows-latest'
    environment: 'nuget-org'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none

          - download: current
            artifact: 'packages'

          - task: DownloadSecureFile@1
            name: Certificate
            displayName: 'Download code signing certificate'
            inputs:
              secureFile: xarial-code-signing.pfx

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                $packagePath = (Get-ChildItem -Path "$(Pipeline.Workspace)/packages/release" -Filter "*.nupkg").FullName
                Write-Host $packagePath
                Write-Host "##vso[task.setvariable variable=packagePath;]$packagePath"

          - task: NuGetCommand@2
            displayName: 'Sign NuGet Package'
            inputs:
              command: 'custom'
              arguments: sign "$(PackagePath)" -CertificatePath "$(Certificate.secureFilePath)" -CertificatePassword "$(CODE_SIGN_CERT_PWD)" -Timestamper http://timestamp.comodoca.com

          - task: NuGetCommand@2
            displayName: 'Push NuGet Package'
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/release/*.nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'Nuget.org'